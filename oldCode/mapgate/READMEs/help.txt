/**
 * ShapeForge.js - Visual 3D geometry editor for Three.js
 * Modified to work in Shoelace tabs instead of drawers
 * 
 * This tool allows for creating, editing, and exporting 3D geometries with
 * materials and shader effects for use in Three.js applications.
 */

class ShapeForge {
  /**
   * Create a new ShapeForge editor
   * @param {ResourceManager} resourceManager - Reference to the resource manager
   * @param {ShaderEffectsManager} shaderEffectsManager - Reference to the shader effects manager
   * @param {MapEditor} mapEditor - Reference to the map editor
   * @param {HTMLElement} container - Container element (tab panel or div)
   */
  constructor(resourceManager = null, shaderEffectsManager = null, mapEditor = null, container = null) {
    // Add mapEditor parameter
    this.mapEditor = mapEditor;
    this.container = container; // Store the container reference

    // Dependencies
    // Try to get ResourceManager from mapEditor first if available
    if (mapEditor && mapEditor.resourceManager) {
      this.resourceManager = mapEditor.resourceManager;
      console.log('ResourceManager connected from MapEditor');
    } else {
      this.resourceManager = resourceManager;
    }

    this.shaderEffectsManager = shaderEffectsManager;

    // Core properties
    this.objects = [];
    this.selectedObject = null;
    this.history = [];
    this.historyIndex = -1;
    this.maxHistorySteps = 30;

    // Scene for preview
    this.previewScene = null;
    this.previewCamera = null;
    this.previewRenderer = null;
    this.previewControls = null;
    this.previewContainer = null;
    this.isPreviewActive = false;

    // UI references
    this.uiContainer = null; // Changed from drawer to uiContainer
    this.propertyPanels = {};

    // Bind methods to maintain proper 'this' context
    this.animate = this.animate.bind(this);
    this.handleResize = this.handleResize.bind(this);

    // Auto-load dependencies if needed
    this.checkDependencies();
  }

  /**
   * Check and load necessary dependencies
   */
  checkDependencies() {
    console.log("ShapeForge checking dependencies...");

    // Check if THREE.js is available
    if (!window.THREE) {
      console.error("THREE.js not available! ShapeForge requires THREE.js to function.");
      return false;
    }

    // Try to get ResourceManager from window if not provided
    if (!this.resourceManager && window.resourceManager) {
      this.resourceManager = window.resourceManager;
      console.log("Using global ResourceManager");
    }

    // Try to get ShaderEffectsManager from window if not provided
    if (!this.shaderEffectsManager && window.shaderEffectsManager) {
      this.shaderEffectsManager = window.shaderEffectsManager;
      console.log("Using global ShaderEffectsManager");
    }

    return true;
  }

  /**
   * Manually connect to ResourceManager
   * @param {ResourceManager} resourceManager - Instance of ResourceManager
   */
  connectResourceManager(resourceManager) {
    if (!resourceManager) {
      console.error("Invalid ResourceManager provided");
      return false;
    }

    this.resourceManager = resourceManager;
    console.log("Manually connected to ResourceManager:", {
      hasTextures: !!this.resourceManager.resources?.textures,
      textureCategories: Object.keys(this.resourceManager.resources?.textures || {})
    });

    return true;
  }

  /**
   * Initialize ShapeForge in the provided container
   * @param {HTMLElement} container - Container element (optional, uses constructor container if not provided)
   */
  show(container = null) {
    console.log("ShapeForge show() called");

    // Use provided container or fall back to constructor container
    if (container) {
      this.container = container;
    }

    if (!this.container) {
      console.error("No container provided for ShapeForge!");
      return this;
    }

    // Check if THREE.js is available
    if (!window.THREE) {
      console.error("THREE.js not available! Cannot show ShapeForge.");
      alert("ShapeForge requires THREE.js which is not loaded. Please check console for details.");
      return this;
    }

    // Create UI if it doesn't exist
    if (!this.uiContainer) {
      console.log("Creating ShapeForge UI");
      this.createUI();
    }

    // Check if the UI was created successfully
    if (!this.uiContainer) {
      console.error("Failed to create ShapeForge UI!");
      return this;
    }

    // Wait a moment for the UI to be visible before initializing preview
    setTimeout(() => {
      // Check if preview container exists in the DOM
      this.previewContainer = this.uiContainer.querySelector('#preview-container');

      if (!this.previewContainer) {
        console.error("Preview container not found in ShapeForge UI!");
        return;
      }

      console.log("Preview container found:", {
        width: this.previewContainer.clientWidth,
        height: this.previewContainer.clientHeight,
        visible: this.previewContainer.offsetParent !== null
      });

      // Start the preview if not already running
      if (!this.isPreviewActive) {
        this.startPreview();
      }
    }, 500); // Wait 500ms for the UI to render

    if (!this.featuresInitialized) {
      // Wait a moment for UI to be ready, then initialize features
      setTimeout(async () => {
        try {
          await this.initializeNewFeatures();
          this.addPhysicsPanel();
          this.featuresInitialized = true;
          console.log('All ShapeForge features initialized');
        } catch (error) {
          console.error('Error during ShapeForge feature initialization:', error);
        }
      }, 1000);
    }

    return this;
  }

  /**
   * Hide the ShapeForge UI
   */
  hide() {
    if (this.uiContainer) {
      this.uiContainer.style.display = 'none';
    }

    // Stop the preview to save resources
    if (this.isPreviewActive) {
      this.stopPreview();
    }

    return this;
  }

  /**
   * Create the main UI components
   */
  createUI() {
    console.log("Creating ShapeForge UI");

    // Create main container div instead of drawer
    this.uiContainer = document.createElement('div');
    this.uiContainer.id = 'shape-forge-ui';
    this.uiContainer.style.cssText = `
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    `;

    // Create UI content
    this.uiContainer.innerHTML = `
    <div id="shape-forge-container" style="display: flex; height: 100%; max-height: 100%; overflow: hidden; gap: 10px; flex: 1;">
      <!-- Left panel for basic tools and shapes -->
      <div class="tool-panel" style="width: 220px; padding: 10px; overflow-y: auto; border-right: 1px solid #444; background: #2a2a2a;">
        <!-- Project Info -->
        <div class="panel-section">
          <sl-input id="project-name" label="Project Name" placeholder="Untitled Project"></sl-input>
          <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 6px; margin-top: 10px;">
            <sl-button id="new-project" size="small">New File</sl-button>
            <sl-button id="loadModelBtn" size="small">Open File</sl-button>
            <sl-button id="save-project" size="small">Export File</sl-button>
            <sl-button id="import-additional" size="small">Add to Project</sl-button>
            <sl-button id="save-to-resources" size="small">Save to Resources</sl-button>
            <sl-button id="clear-all" size="small" variant="danger">Clear All</sl-button>
            <sl-button id="importDXF" size="small">Import DXF</sl-button>
          </div>
        </div>
        
        <div class="panel-section" style="margin-top: 20px;">
          <h3>Shapes</h3>
          <div class="shape-buttons" style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 6px;">
            <!-- Basic Shapes -->
            <sl-icon-button title="Cube" name="square" label="Cube" id="shape-cube"></sl-icon-button>
            <sl-icon-button title="Sphere" name="circle" label="Sphere" id="shape-sphere"></sl-icon-button>
            <sl-icon-button title="Cylinder" name="plus-square" label="Cylinder" id="shape-cylinder"></sl-icon-button>
            <sl-icon-button title="Cone" name="triangle" label="Cone" id="shape-cone"></sl-icon-button>
            <sl-icon-button title="Torus" name="life-preserver" label="Torus" id="shape-torus"></sl-icon-button>
            <sl-icon-button title="Plane" name="window" label="Plane" id="shape-plane"></sl-icon-button>
            
            <!-- Dice Shapes -->
            <sl-icon-button title="D4" name="diamond" label="D4 Tetrahedron" id="shape-d4"></sl-icon-button>
            <sl-icon-button title="D8" name="octagon" label="D8 Octahedron" id="shape-d8"></sl-icon-button>
            <sl-icon-button title="D10" name="pentagon" label="D10" id="shape-d10"></sl-icon-button>
            <sl-icon-button title="D12" name="hexagon" label="D12 Dodecahedron" id="shape-d12"></sl-icon-button>
            <sl-icon-button title="D20" name="record-circle" label="D20 Icosahedron" id="shape-d20"></sl-icon-button>
            
            <!-- Additional Shapes -->
            <sl-icon-button title="Torus Knot" name="intersect" label="Torus Knot" id="shape-torus-knot"></sl-icon-button>
            <sl-icon-button title="Pyramid" name="triangle-fill" label="Pyramid" id="shape-pyramid"></sl-icon-button>
            <sl-icon-button title="Capsule" name="capsule" label="Capsule" id="shape-capsule"></sl-icon-button>
            <sl-icon-button title="Tube" name="record" label="Tube/Ring" id="shape-tube"></sl-icon-button>
            <sl-icon-button title="Hemisphere" name="circle-half" label="Hemisphere" id="shape-hemisphere"></sl-icon-button>
            <sl-icon-button title="Star" name="asterisk" label="Star" id="shape-star"></sl-icon-button>
          </div>
        </div>
        
        <!-- Transform Controls -->
        <div class="panel-section" style="margin-top: 20px;">
          <h3>Transform</h3>
          <div id="transform-container">
            <!-- Position -->
            <div class="transform-group">
              <label>Position</label>
              <div style="display: grid; grid-template-columns: auto 1fr auto; gap: 6px; align-items: center;">
                <label>X:</label>
                <sl-range id="position-x" min="-10" max="10" step="0.1" value="0"></sl-range>
                <sl-button-group>
                  <sl-button size="small" id="pos-x-minus" title="Move -0.5 on X axis">-0.5</sl-button>
                  <sl-button size="small" id="pos-x-plus" title="Move +0.5 on X axis">+0.5</sl-button>
                </sl-button-group>
                
                <label>Y:</label>
                <sl-range id="position-y" min="-10" max="10" step="0.1" value="0"></sl-range>
                <sl-button-group>
                  <sl-button size="small" id="pos-y-minus" title="Move -0.5 on Y axis">-0.5</sl-button>
                  <sl-button size="small" id="pos-y-plus" title="Move +0.5 on Y axis">+0.5</sl-button>
                </sl-button-group>
                
                <label>Z:</label>
                <sl-range id="position-z" min="-10" max="10" step="0.1" value="0"></sl-range>
                <sl-button-group>
                  <sl-button size="small" id="pos-z-minus" title="Move -0.5 on Z axis">-0.5</sl-button>
                  <sl-button size="small" id="pos-z-plus" title="Move +0.5 on Z axis">+0.5</sl-button>
                </sl-button-group>
              </div>
            </div>
            
            <!-- Rotation -->
            <div class="transform-group" style="margin-top: 10px;">
              <label>Rotation (degrees)</label>
              <div style="display: grid; grid-template-columns: auto 1fr auto; gap: 6px; align-items: center;">
                <label>X:</label>
                <sl-range id="rotation-x" min="0" max="360" step="1" value="0"></sl-range>
                <sl-button-group>
                  <sl-button size="small" id="rot-x-90">90°</sl-button>
                  <sl-button size="small" id="rot-x-180">180°</sl-button>
                </sl-button-group>
                
                <label>Y:</label>
                <sl-range id="rotation-y" min="0" max="360" step="1" value="0"></sl-range>
                <sl-button-group>
                  <sl-button size="small" id="rot-y-90">90°</sl-button>
                  <sl-button size="small" id="rot-y-180">180°</sl-button>
                </sl-button-group>
                
                <label>Z:</label>
                <sl-range id="rotation-z" min="0" max="360" step="1" value="0"></sl-range>
                <sl-button-group>
                  <sl-button size="small" id="rot-z-90">90°</sl-button>
                  <sl-button size="small" id="rot-z-180">180°</sl-button>
                </sl-button-group>
              </div>
            </div>
            
            <!-- Scale -->
            <div class="transform-group" style="margin-top: 10px;">
              <label>Scale</label>
              <div style="display: grid; grid-template-columns: auto 1fr; gap: 6px; align-items: center;">
                <label>X:</label>
                <sl-range id="scale-x" min="0.1" max="10" step="0.1" value="1"></sl-range>
                <label>Y:</label>
                <sl-range id="scale-y" min="0.1" max="10" step="0.1" value="1"></sl-range>
                <label>Z:</label>
                <sl-range id="scale-z" min="0.1" max="10" step="0.1" value="1"></sl-range>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Shape Properties -->
        <div class="panel-section" style="margin-top: 20px;">
          <h3>Properties</h3>
          <div id="properties-container">
            <!-- Properties will be added dynamically based on selected object -->
            <div class="no-selection-message">
              Select or create an object to edit properties
            </div>
          </div>
        </div>

        <!-- Materials -->
        <div class="panel-section" style="margin-top: 20px;">
          <h3>Materials</h3>
          <div id="materials-container">
            <sl-select label="Material Type" id="material-type">
              <sl-option value="basic">Basic</sl-option>
              <sl-option value="standard">Standard</sl-option>
              <sl-option value="phong">Phong</sl-option>
              <sl-option value="lambert">Lambert</sl-option>
            </sl-select>
            
            <sl-color-picker label="Color" id="material-color" value="#3388ff"></sl-color-picker>
            
            <sl-checkbox id="material-wireframe">Wireframe</sl-checkbox>
            
            <sl-range id="material-opacity" min="0" max="1" step="0.01" value="1" 
                    label="Opacity"></sl-range>
            
            <sl-range id="material-metalness" min="0" max="1" step="0.01" value="0" 
                    label="Metalness"></sl-range>
            
            <sl-range id="material-roughness" min="0" max="1" step="0.01" value="0.5" 
                    label="Roughness"></sl-range>
          </div>
        </div>
        
        <!-- Shader Effects -->
        <div class="panel-section" style="margin-top: 20px;">
          <h3>Shader Effects</h3>
          <div id="effects-container">
            <sl-select label="Effect Type" id="effect-type">
              <sl-option value="none">None</sl-option>
              <sl-option value="glow">Glow Effect</sl-option>
              <sl-option value="fire">Fire Effect</sl-option>
              <sl-option value="magic">Magic Effect</sl-option>
            </sl-select>
            
            <div id="effect-properties" style="display: none; margin-top: 10px;">
              <!-- Effect properties will be added dynamically -->
            </div>
          </div>
        </div>
      </div>
      
      <!-- Center panel for 3D preview -->
      <div class="preview-panel" style="flex: 2; display: flex; flex-direction: column; background: #1a1a1a; border-radius: 8px; margin: 0 5px;">
        <div style="padding: 10px; border-bottom: 1px solid #444; background: #333; border-radius: 8px 8px 0 0;">
          <h3 style="margin: 0; color: #fff; font-size: 14px;">3D Preview</h3>
        </div>
        <div id="preview-container" style="flex: 1; position: relative; border-radius: 0 0 8px 8px; overflow: hidden; width: 100%; height: 100%;">
          <!-- Three.js preview will be inserted here -->
        </div>
      </div>
      
      <!-- Right panel for object properties and advanced controls -->
      <div class="properties-panel" style="width: 280px; padding: 10px; overflow-y: auto; border-left: 1px solid #444; background: #2a2a2a;">
        <!-- Object Properties -->
        <div class="panel-section">
          <h3>Selected Object</h3>
          <div id="properties-container">
            <!-- Properties will be populated based on selected object -->
            <div class="no-selection-message">
              <p>Select an object to edit its properties.</p>
            </div>
          </div>
        </div>
        
        <!-- Materials -->
        <div class="panel-section" style="margin-top: 20px;">
          <h3>Materials</h3>
          <div id="materials-container">
            <!-- Material controls -->
            <div class="material-control">
              <label>Color:</label>
              <sl-color-picker id="material-color" value="#ff0000" format="hex"></sl-color-picker>
            </div>
            
            <div class="material-control" style="margin-top: 10px;">
              <label>Transparency:</label>
              <sl-range id="material-opacity" min="0" max="1" step="0.01" value="1"></sl-range>
            </div>
            
            <div class="material-control" style="margin-top: 10px;">
              <label>Roughness:</label>
              <sl-range id="material-roughness" min="0" max="1" step="0.01" value="0.5"></sl-range>
            </div>
            
            <div class="material-control" style="margin-top: 10px;">
              <label>Metalness:</label>
              <sl-range id="material-metalness" min="0" max="1" step="0.01" value="0"></sl-range>
            </div>
            
            <div class="material-control" style="margin-top: 10px;">
              <label>Emissive:</label>
              <sl-range id="material-emissive" min="0" max="1" step="0.01" value="0"></sl-range>
            </div>
          </div>
        </div>
        
        <!-- Objects List -->
        <div class="panel-section" style="margin-top: 20px;">
          <h3>Scene Objects</h3>
          <div id="objects-list-container" style="max-height: 200px; overflow-y: auto; border: 1px solid #444; border-radius: 4px; padding: 8px;">
            <!-- List of objects in the scene -->
          </div>
        </div>
        
        <!-- Camera Controls -->
        <div class="panel-section" style="margin-top: 20px;">
          <h3>Camera & View</h3>
          <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 8px;">
            <sl-button id="reset-camera" size="small">Reset View</sl-button>
            <sl-button id="fit-camera" size="small">Fit All</sl-button>
            <sl-button id="front-view" size="small">Front</sl-button>
            <sl-button id="top-view" size="small">Top</sl-button>
            <sl-button id="side-view" size="small">Side</sl-button>
            <sl-button id="perspective-view" size="small">3D View</sl-button>
          </div>
        </div>
      </div>
    </div>
  `;

    // Add UI to the container instead of document body
    this.container.appendChild(this.uiContainer);

    // Get references to UI elements
    this.previewContainer = this.uiContainer.querySelector('#preview-container');
    this.objectsListContainer = this.uiContainer.querySelector('#objects-list-container');

    // Set up event listeners
    this.setupEventListeners();

    const materialsContainer = this.uiContainer.querySelector('#materials-container');
    if (materialsContainer) {
      // Add texture selection button
      const textureBtn = document.createElement('sl-button');
      textureBtn.style.marginTop = '16px';
      textureBtn.style.width = '100%';
      textureBtn.innerHTML = `
        <span class="material-icons" slot="prefix">wallpaper</span>
        Apply Texture from Resources
    `;

      textureBtn.addEventListener('click', () => {
        if (this.selectedObject !== null) {
          this.showTextureSelectionDialog();
        } else {
          alert('Please select an object first');
        }
      });

      materialsContainer.appendChild(textureBtn);
    }
  }

  /**
   * Set up event listeners for UI interactions
   */
  setupEventListeners() {
    // Note: Removed drawer close button listener since we're not using a drawer

    // Shape creation buttons
    const shapeButtons = {
      'shape-cube': this.createCube.bind(this),
      'shape-sphere': this.createSphere.bind(this),
      'shape-cylinder': this.createCylinder.bind(this),
      'shape-cone': this.createCone.bind(this),
      'shape-torus': this.createTorus.bind(this),
      'shape-plane': this.createPlane.bind(this),
      'shape-d4': this.createTetrahedron.bind(this),
      'shape-d6': this.createCube.bind(this),
      'shape-d8': this.createOctahedron.bind(this),
      'shape-d10': this.createD10.bind(this),
      'shape-d12': this.createDodecahedron.bind(this),
      'shape-d20': this.createIcosahedron.bind(this),
      // New shapes
      'shape-torus-knot': this.createTorusKnot.bind(this),
      'shape-pyramid': this.createPyramid.bind(this),
      'shape-prism': this.createPrism.bind(this),
      'shape-capsule': this.createCapsule.bind(this),
      'shape-tube': this.createTube.bind(this),
      'shape-hemisphere': this.createHemisphere.bind(this),
      'shape-rounded-cube': this.createRoundedCube.bind(this),
      'shape-star': this.createStar.bind(this)
    };

    // Add event listeners for shape buttons
    Object.entries(shapeButtons).forEach(([id, handler]) => {
      const button = this.uiContainer.querySelector(`#${id}`);
      if (button) {
        button.addEventListener('click', handler);
      }
    });

    // Material type change
    const materialTypeSelect = this.uiContainer.querySelector('#material-type');
    if (materialTypeSelect) {
      materialTypeSelect.addEventListener('sl-change', (e) => {
        this.updateMaterialType(e.target.value);
      });
    }

    // Material color change
    const colorPicker = this.uiContainer.querySelector('#material-color');
    if (colorPicker) {
      colorPicker.addEventListener('sl-change', (e) => {
        this.updateMaterialColor(e.target.value);
      });
    }

    // Material property changes
    ['wireframe', 'opacity', 'metalness', 'roughness'].forEach(prop => {
      const control = this.uiContainer.querySelector(`#material-${prop}`);
      if (control) {
        control.addEventListener('sl-change', (e) => {
          this.updateMaterialProperty(prop, e.target.type === 'checkbox' ? e.target.checked : e.target.value);
        });
      }
    });

    // Project controls
    this.uiContainer.querySelector('#new-project')?.addEventListener('click', this.newProject.bind(this));
    this.uiContainer.querySelector('#save-project')?.addEventListener('click', this.saveProject.bind(this));
    this.uiContainer.querySelector('#export-code')?.addEventListener('click', this.showExportDialog.bind(this));
    this.uiContainer.querySelector('#save-to-resources')?.addEventListener('click', this.saveToResources.bind(this));
    this.uiContainer.querySelector('#loadModelBtn')?.addEventListener('click', this.showModelBrowser.bind(this));

    const rotationQuickButtons = [
      { id: 'rot-x-90', axis: 'x', degrees: 90 },
      { id: 'rot-x-180', axis: 'x', degrees: 180 },
      { id: 'rot-y-90', axis: 'y', degrees: 90 },
      { id: 'rot-y-180', axis: 'y', degrees: 180 },
      { id: 'rot-z-90', axis: 'z', degrees: 90 },
      { id: 'rot-z-180', axis: 'z', degrees: 180 }
    ];

    rotationQuickButtons.forEach(btn => {
      const button = this.uiContainer.querySelector(`#${btn.id}`);
      if (button) {
        button.addEventListener('click', () => {
          if (this.selectedObject === null) return;

          const object = this.objects[this.selectedObject];
          const currentDegrees = (object.rotation[btn.axis] * 180) / Math.PI;

          // Add the degrees, keeping within 0-360 range
          let newDegrees = (currentDegrees + btn.degrees) % 360;

          // Update the slider
          const slider = this.uiContainer.querySelector(`#rotation-${btn.axis}`);
          if (slider) {
            slider.value = newDegrees;

            // Trigger the change event
            this.updateTransform('rotation', btn.axis, newDegrees);
          }
        });
      }
    });

    // Position quick adjustment buttons
    const positionQuickButtons = [
      { id: 'pos-x-minus', axis: 'x', value: -0.5 },
      { id: 'pos-x-plus', axis: 'x', value: 0.5 },
      { id: 'pos-y-minus', axis: 'y', value: -0.5 },
      { id: 'pos-y-plus', axis: 'y', value: 0.5 },
      { id: 'pos-z-minus', axis: 'z', value: -0.5 },
      { id: 'pos-z-plus', axis: 'z', value: 0.5 }
    ];

    positionQuickButtons.forEach(btn => {
      const button = this.uiContainer.querySelector(`#${btn.id}`);
      if (button) {
        button.addEventListener('click', () => {
          if (this.selectedObject === null) return;

          const object = this.objects[this.selectedObject];
          const currentValue = object.position[btn.axis];

          // Calculate new position value
          const newValue = currentValue + btn.value;

          // Update the slider
          const slider = this.uiContainer.querySelector(`#position-${btn.axis}`);
          if (slider) {
            // Ensure we stay within the slider's range
            slider.value = Math.max(slider.min, Math.min(slider.max, newValue));

            // Trigger the update
            this.updateTransform('position', btn.axis, slider.value);
          }
        });
      }
    });

    // Transform controls
    const transformControls = ['position', 'rotation', 'scale'];
    const axes = ['x', 'y', 'z'];

    transformControls.forEach(control => {
      axes.forEach(axis => {
        const slider = this.uiContainer.querySelector(`#${control}-${axis}`);
        if (slider) {
          slider.addEventListener('sl-change', (e) => {
            this.updateTransform(control, axis, e.target.value);
          });
        }
      });
    });

    this.uiContainer.querySelector('#import-additional')?.addEventListener('click', this.importAdditional.bind(this));
    this.uiContainer.querySelector('#clear-all')?.addEventListener('click', this.clearAll.bind(this));

    // Preview controls
    this.uiContainer.querySelector('#preview-reset-camera')?.addEventListener('click', this.resetCamera.bind(this));
    this.uiContainer.querySelector('#preview-wireframe')?.addEventListener('click', () => this.setPreviewMode('wireframe'));
    this.uiContainer.querySelector('#preview-solid')?.addEventListener('click', () => this.setPreviewMode('solid'));

    // History controls
    this.uiContainer.querySelector('#object-undo')?.addEventListener('click', this.undo.bind(this));
    this.uiContainer.querySelector('#object-redo')?.addEventListener('click', this.redo.bind(this));

    // Window resize
    window.addEventListener('resize', this.handleResize);

    const scaleContainer = this.uiContainer.querySelector('.transform-group:has(#scale-x)');
    if (scaleContainer) {
      // Create a new div for our scale percentage controls
      const scalePercentDiv = document.createElement('div');
      scalePercentDiv.style.cssText = 'margin-top: 12px; border-top: 1px solid #555; padding-top: 8px;';
      scalePercentDiv.innerHTML = `
        <div style="display: flex; gap: 8px; align-items: center; flex-wrap: wrap;">
          <sl-input id="scale-percentage" type="number" size="small" placeholder="50%" style="width: 80px;">
            <span slot="suffix">%</span>
          </sl-input>
          <sl-button size="small" id="scale-increase">+ Resize</sl-button>
          <sl-button size="small" id="scale-decrease">- Resize</sl-button>
        </div>
      `;
      
      // Add the percentage controls after all existing content
      scaleContainer.appendChild(scalePercentDiv);
      
      // Scale percentage controls
      const scaleInput = this.uiContainer.querySelector('#scale-percentage');
      const scaleIncreaseBtn = this.uiContainer.querySelector('#scale-increase');
      const scaleDecreaseBtn = this.uiContainer.querySelector('#scale-decrease');
    
      const applyScalePercentage = (percentageStr) => {
        if (this.selectedObject === null) return;
        
        // Parse the input value
        let percentage = parseFloat(percentageStr);
        if (isNaN(percentage)) return;
        
        // Convert to multiplier (50% becomes 0.5, -25% becomes -0.25)
        const multiplier = percentage / 100;
        
        const object = this.objects[this.selectedObject];
        const axes = ['x', 'y', 'z'];
        
        // Store original values for history
        const oldScales = {
          x: object.scale.x,
          y: object.scale.y,
          z: object.scale.z
        };
        
        // Calculate new scale values
        const newScales = {};
        axes.forEach(axis => {
          const currentScale = object.scale[axis];
          
          // If positive percentage, increase by that amount
          // If negative percentage, decrease by that amount
          newScales[axis] = multiplier >= 0 ? 
            currentScale * (1 + multiplier) : 
            currentScale * (1 - Math.abs(multiplier));
          
          // Ensure scale doesn't go below minimum
          newScales[axis] = Math.max(0.1, newScales[axis]);
          
          // Update slider with new value
          const slider = this.uiContainer.querySelector(`#scale-${axis}`);
          if (slider) {
            slider.value = Math.min(slider.max, newScales[axis]);
            this.updateTransform('scale', axis, slider.value);
          }
        });
        
        // Add a single grouped history step for all axes
        this.addHistoryStep('scaleMultiple', {
          objectIndex: this.selectedObject,
          oldScales: oldScales,
          newScales: newScales
        });
      };
    
      // Set up event listeners - no Apply button, apply directly on + and -
      if (scaleIncreaseBtn) {
        scaleIncreaseBtn.addEventListener('click', () => {
          if (scaleInput && scaleInput.value) {
            applyScalePercentage(Math.abs(parseFloat(scaleInput.value)));
          } else {
            // Default to 25% if no value is entered
            applyScalePercentage(25);
          }
        });
      }
    
      if (scaleDecreaseBtn) {
        scaleDecreaseBtn.addEventListener('click', () => {
          if (scaleInput && scaleInput.value) {
            applyScalePercentage(-Math.abs(parseFloat(scaleInput.value)));
          } else {
            // Default to -25% if no value is entered
            applyScalePercentage(-25);
          }
        });
      }
    
      // Handle enter key in the input to apply immediately
      if (scaleInput) {
        scaleInput.addEventListener('keydown', (e) => {
          if (e.key === 'Enter') {
            e.preventDefault();
            applyScalePercentage(scaleInput.value);
          }
        });
      }
    }

    this.uiContainer.querySelector('#importDXF')?.addEventListener('click', () => this.importDXF());
  }

  // [PLACEHOLDER FOR REMAINING METHODS]
  // Note: All other methods from the original ShapeForge class would go here
  // I'm including just the key methods that need updating for tab compatibility

  /**
   * Update property panels for the selected object
   * @param {Object} object - Object data
   */
  updatePropertyPanels(object) {
    if (!object) {
      // No selection, clear properties
      const propertiesContainer = this.uiContainer.querySelector('#properties-container');
      if (propertiesContainer) {
        propertiesContainer.innerHTML = `
          <div class="no-selection-message">
            Select or create an object to edit properties
          </div>
        `;
      }
      return;
    }

    // Create properties UI based on object type
    const propertiesContainer = this.uiContainer.querySelector('#properties-container');
    if (!propertiesContainer) return;

    // Clear existing properties
    while (propertiesContainer.firstChild) {
      // If it's a Shoelace element, remove it properly
      if (propertiesContainer.firstChild.tagName &&
        propertiesContainer.firstChild.tagName.startsWith('SL-')) {
        propertiesContainer.firstChild.remove();
      } else {
        propertiesContainer.removeChild(propertiesContainer.firstChild);
      }
    }

    // Create name input
    const nameInput = document.createElement('sl-input');
    nameInput.label = 'Name';
    nameInput.value = object.name;
    nameInput.id = 'object-name';
    propertiesContainer.appendChild(nameInput);

    // Add event listener for name change
    nameInput.addEventListener('sl-change', (e) => {
      const oldName = object.name;
      const newName = e.target.value.trim();

      if (newName) {
        object.name = newName;
        this.addHistoryStep('rename', {
          objectIndex: this.selectedObject,
          oldName,
          newName
        });
      }
    });

    // [Continue with geometry-specific properties similar to original...]
    // This would include all the geometry parameter controls from the original
  }

  /**
   * Add a range slider to the properties panel
   * @param {HTMLElement} container - Container element
   * @param {string} label - Slider label
   * @param {string} id - Slider ID
   * @param {number} value - Initial value
   * @param {number} min - Minimum value
   * @param {number} max - Maximum value
   * @param {number} step - Step value
   * @param {Function} onChange - Change handler
   */
  addRangeSlider(container, label, id, value, min, max, step, onChange) {
    const slider = document.createElement('sl-range');
    slider.label = label;
    slider.min = min;
    slider.max = max;
    slider.step = step;
    slider.value = value;
    slider.id = `property-${id}`;
    slider.style.marginTop = '8px';

    slider.addEventListener('sl-change', (e) => {
      onChange(parseFloat(e.target.value));
    });

    container.appendChild(slider);
    return slider;
  }

  // [ALL OTHER ORIGINAL METHODS GO HERE]
  // For brevity, I'm not including all methods, but they would be copied 
  // from the original with these key changes:
  // 1. Replace all `this.drawer.querySelector` with `this.uiContainer.querySelector`
  // 2. No drawer-specific methods (hide/show drawer)
  // 3. Container management for tab system

}